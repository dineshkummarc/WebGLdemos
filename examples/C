<!DOCTYPE HTML>
<html lang="en">
	<head>
		<title>three.js webgl - materials - normal map [Lee Perry-Smith]</title>
		<meta charset="utf-8">
		<style type="text/css">
			body {
				background:#fff;
				color:#fff;
				padding:0;
				margin:0;
				font-weight: bold;
				overflow:hidden;
			}

			a {	color: #ffffff;	}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family:Monospace;
				font-size:13px;
				text-align:center;
				z-index:1000;
			}

			#oldie {
				background:rgb(200,100,0) !important;
				color:#fff;
			}

			#vt { display:none }
			#vt, #vt a { color:orange; }
			.code { }

			#log { position:absolute; top:50px; text-align:left; display:block; z-index:100 }
		</style>
	</head>

	<body>
		<div id="zz" style="display:none; top:400px; left:400px; background:#F00; position:absolute;">dfdsfdssdffgdfkligdlsfghfdkjsglfdkjghlsdfjghdsfgsdfkljgdfkgjd
		</div>
		<div id="cont">
		</div>
		<pre id="log"></pre>

		<div id="info">
			<a href="http://github.com/mrdoob/three.js" target="_blank">three.js</a> - webgl normalmap demo.
			<a href="http://www.ir-ltd.net/infinite-3d-head-scan-released/" target="_blank">Lee Perry-Smith</a> head.

			<div id="vt">displacement mapping needs vertex textures (GPU with Shader Model 3.0)<br/>
			on Windows use <span class="code">Chrome --use-gl=desktop</span> or Firefox 4<br/>
			please star this <a href="http://code.google.com/p/chromium/issues/detail?id=52497">Chrome issue</a> to get ANGLE support
			
		</div>

		<video id="video" autoplay loop style="display:none"> 
			
			<source src="textures/lav.ogg" type='video/ogg; codecs="theora, vorbis"'> 
		</video> 
		<script type="text/javascript" src="../build/Three.js"></script>

		<script type="text/javascript" src="js/Detector.js"></script>
		<script type="text/javascript" src="js/RequestAnimationFrame.js"></script>
		<script type="text/javascript" src="js/ShaderZ.js"></script>
		<script type="text/javascript" src="js/Stats.js"></script>

		<script type="text/javascript">

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var statsEnabled = true;

			var container, stats, loader;

			var camera, scene, renderer,video,texturex,tlava,trock;

			var mesh,mesh1, zmesh, lightMesh, geometry,tt=-10.0,t=-10.5,vz=0;
			var meshx=new Array();

			var directionalLight, pointLight, ambientLight;
			var height = window.innerHeight - 300;

			var mouseX = 0;
			var mouseY = 0;
			var vx,vy,lastx,lasty;
			var postprocessing = { enabled  : true };
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			var materials = [];
			
			init();
			animate();

			function init() {
			
				
				vx=vy=lastx=lasty=0;
				
				container = document.getElementById('cont');
				document.body.appendChild(container);

				camera = new THREE.Camera( 120, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = -5;
				camera.position.y = 0;
				camera.position.x = 0;
				camera.rotation.x = 0;
				camera.useTarget=false;
				scene = new THREE.Scene();

				loader = new THREE.JSONLoader( true );
				document.body.appendChild( loader.statusDomElement );				
				
				tlava = THREE.ImageUtils.loadTexture( "lava2.jpg"  );	
				tlava.wrapS = THREE.RepeatWrapping;
				tlava.wrapT = THREE.RepeatWrapping;				
				var material = new THREE.MeshPhongMaterial( { color: 0xFFEEBB , ambient:0xFFEEBB , map:tlava } );
							
				loader.load( { model: "bmodels/ztext.js", callback: function( geometry ) { createScene( geometry, 100,2, material,scene ) } } );
				
				var plano = new THREE.Mesh( new THREE.PlaneGeometry( window.innerWidth, window.innerHeight), new THREE.MeshBasicMaterial({ color:0x000000 }) );
				plano.position.z = - 200;
				scene.addObject( plano );
				
				renderer = new THREE.WebGLRenderer({ antialias: true });
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
			
				scene.matrixAutoUpdate = false;
				
				initPostprocessing();
				if ( statsEnabled ) {
					stats = new Stats();
					stats.domElement.style.position = 'absolute';
					stats.domElement.style.top = '0px';
					stats.domElement.style.zIndex = 100;
					container.appendChild( stats.domElement );
				}
				document.addEventListener( 'mousedown', onDocumentMouseDown, false );

			}
			function createScene( geometry, scale,num, material,scena ) {
				geometry.computeTangents();
				meshx[num]= THREE.SceneUtils.addMesh( scena, geometry, scale, -130, -20,0, 0, 0, 0, material );
				meshx[num].scale.y*=1.3;
				t=0.0;
				loader.statusDomElement.style.display = "none";
			}			
			function onDocumentMouseDown( event ) { 
				event.preventDefault(); 
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mouseup', onDocumentMouseUp, false );
				document.addEventListener( 'mouseout', onDocumentMouseOut, false ); 
				lastx = event.clientX;
				lasty = event.clientY;	
			}
			function onDocumentMouseMove( event ) { 
				vx += event.clientX - lastx; 
				vy += event.clientY - lasty; 
				lastx = event.clientX;
				lasty = event.clientY;	
				targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
			} 
			function onDocumentMouseUp( event ) { 
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			} 
			function onDocumentMouseOut( event ) { 
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}
 
			function animate() {
				requestAnimationFrame( animate );
				render();
				if ( statsEnabled ) stats.update();
			}

			function log( text ) {
				var e = document.getElementById("log");
				e.innerHTML = text + "<br/>" + e.innerHTML;
			}			
			function initPostprocessing() {
			
				////////////////////////////////////nova cena - brilho
				postprocessing.scene2 = new THREE.Scene();
				trock = THREE.ImageUtils.loadTexture( "iii.jpg"  );	
				trock.wrapS = THREE.RepeatWrapping;
				trock.wrapT = THREE.RepeatWrapping;					
				var material = new THREE.MeshPhongMaterial( { color: 0xFFEEBB , ambient:0xFFEEBB , map:trock } );				
				loader.load( { model: "bmodels/ztext.js", callback: function( geometry ) { createScene( geometry, 100,2, material,postprocessing.scene2 ) } } );
					
				///////////////////////////aplicando fire!!!
				postprocessing.scene = new THREE.Scene();	
				var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };
				postprocessing.preresult = new THREE.WebGLRenderTarget( window.innerWidth, height, pars );
				postprocessing.prero = new THREE.WebGLRenderTarget( window.innerWidth, height, pars );
				
				
				postprocessing.camera = new THREE.Camera();
				postprocessing.camera.projectionMatrix = THREE.Matrix4.makeOrtho( window.innerWidth / - 2, window.innerWidth / 2,  window.innerHeight / 2, window.innerHeight / - 2, -10000, 10000 );
				postprocessing.camera.position.z = 600;	
				var gshader = ShaderZ["fire"];
				
				postprocessing.guniforms = THREE.UniformsUtils.clone( gshader.uniforms );
				postprocessing.guniforms["tLava"].texture = postprocessing.preresult;
				postprocessing.guniforms["tRock"].texture = postprocessing.prero;	
				postprocessing.guniforms["t"].value = tt*1.0;		
				postprocessing.postg = new THREE.MeshShaderMaterial( {
					uniforms: postprocessing.guniforms,
					vertexShader: gshader.vertexShader,
					fragmentShader: gshader.fragmentShader
				} );			
				
				//// fundo
				postprocessing.qf = new THREE.Mesh( new THREE.PlaneGeometry( window.innerWidth, window.innerHeight), postprocessing.postg );
				postprocessing.qf.position.z = - 500;
				postprocessing.scene.addObject( postprocessing.qf );
				
			}
			function render() {
			
				if(t>-1){
					t+=(250-t)*0.004;
					tlava.offset = new THREE.Vector2(0.001*t,0.001*t );
					trock.offset = new THREE.Vector2(0.001*t,0.001*t );
					if(vz==0){
						camera.fov+=(65.0-camera.fov)*0.002;
						camera.updateProjectionMatrix();					
						
						if(camera.position.z>240)vz=0.01;
						if(camera.position.z<13){
							camera.position.z+=(0.03+(t*0.009));
						}else{ 
							camera.position.z+=(300-camera.position.z)*0.0015;
							camera.position.x+=(-3-camera.position.x)*0.001;							
						}							
						if(camera.position.z>30){
						    if(tt<800){
								tt+=(850-tt)*0.003;
							}else{
								tt++;
							}
						}						
					
					}else {
						tt++;
						vz+=0.01;
						camera.fov+=(vz*0.32);
						camera.updateProjectionMatrix();
						camera.position.z-=(vz);
						if(camera.position.z<180)
						camera.rotation.z-=((180-camera.position.z)*0.000036);
					}
				}
				postprocessing.guniforms["t"].value = tt*1.0;
				if ( postprocessing.enabled ) {
					renderer.render( scene, camera, postprocessing.preresult, false );
					renderer.render( postprocessing.scene2, camera, postprocessing.prero, false );
					
					renderer.render( postprocessing.scene, postprocessing.camera  );
					//renderer.render( scene, camera);
				} else {
					renderer.render( scene, camera );
				}
			}
		</script>

	</body>
</html>